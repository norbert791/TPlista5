@startuml
'https://plantuml.com/class-diagram

interface ServerApi
interface Board
interface Runnable
class Server
class ArrayBoard
class SimpleMaster
class GameMaster
class Lobby
enum Color
enum Seat

Color "1" --* "*" ArrayBoard
ArrayBoard ..|> Board : implements
Lobby ..> GameMaster : uses
SimpleMaster ..|> GameMaster : implements
SimpleMaster ..> Board : uses
Seat --o SimpleMaster : uses
Lobby "*" --* "1" Server
Player "0..6" -- "1" Lobby
Player "*" --o Server
Player ..|> Runnable : implements
OptionalField --+ ArrayBoard
Type --+ NetPackage
NetPackage ..> Player : uses
ProtocolServer ..> Player : uses
SimpleProtocolServer ..|> ProtocolServer : implemens

class OptionalField {
    +color : Color
}

class NetPackage {
    type : Type
    argument : Serializable
}

class SimpleProtocolServer{
    -socket : Socket
    -inputStream : ObjectInputStream
    -outputStream : ObjectOutputStream
    -packageCache : NetPackage
}

class Player{
    -isReady : boolean
    -socket : Socket
    -connected : boolean
    -protocol : ProtocolServer
    -lobbyArray : Lobby[]
    -lobby : Lobby
    -name : String
    -InterpretCommand(package : NetPackage) : void
    -moveChecker(oldX : int, oldY : int, newX : int, newY : int)  : void
    -setReady(isReady : boolean) : void
    -leave() : void
    -joinLobby(int number) : void
    -sendBoard() : void
    -CheckColor() : void
    -parseCommand(package : NetPackage) : NetPackage
    +Player(parent : Server, socket : Server)
    +Player()
    +getName() : String
    +getReady() : boolean
}
class ArrayBoard{
    -colorList : OptionalColor[][]
    -height : int
    -length :  int
    -midHeight : int
    -midLength : int
    -starSize : int
    -isAnotherJumpPossible() : boolean
}

interface ProtocolServer{
    +retrievePackage() : NetPackage
    +waitForPackage(): NetPackage
    +setSocket() : void
    +sendPackage(package : NetPackage)) : void
}

interface Board{
    +moveChecker(oldX : int, oldY : int, newX : int, newY : int) : boolean
    +getCheckerColor(X : int, Y : int) : Color
    +addChecker(X : int, Y : int, color : Color) : void
    +removeChecker(X : int, Y : int) : void
    +getCheckerColorArray() :  Array<Array<Color>>
    +clear() : void
    +getMask() : boolean[][]
    +setCorner() : void
    +checkCorner() : void
}

interface GameMaster{
    __Meta methods__
   + addPlayer() : Color
   + addPlayer(seat : Seat) : Color
   + removePlayer(color : Color)
   + clearBoard() : void
   + startGame() : Color
   + isFinished() : Color
   __Game methods__
   + moveChecker(oldX : int, oldY : int, newX : int, newY : int, color : Color) : boolean
   + getCheckerArray() : Array<Array<Color>>
   + getWinner() : Color[]
   + getCurrentPlayer() : Color
   + skipTurn() : void
   + forfeit() : void
   + getCheckerArray : Color[]][]
   + boardMast() : boolean[][]
}

class SimpleMaster{
    -board : Board
    -colorList : map<Seat,Color>
    -checkWinConditions(color : Color) : boolean
    -isFinished : boolean
    -order : Color[]
    -currentPlayer : Color
    -winOrder : Collection<Color>
    -turn : int
    -generateOrder() : Color[]
    -fixPositions() : void
}
class Lobby{
    - mask : boolean[][]
    - readinessMap : Map<Player,boolean>
    - forfeitLine : List<Player>
    - winnersLine : List<Player>
    - game : GameMaster
    - colorMap : map<Player,Color>
    + removePlayer() : void
    + addPlayer() : void
    + getCurrentPlayer() : Color
    + getCheckerArray() : Array<Array<Integer>>
    + moveChecker(oldX : int, oldY: int, newX: int, newY : int, player : Player)
    + getWinnerLine() : Player[]
    + getCurrentPlayer : Player
    + skipTurn(player : Player) : void
    + getCheckerArray() : Color[][]
    + getMask() : boolean[][]
    + setReady(status : boolean)
    + getPlayerArray() : String[]
    + getPlayerMap() : Map<String, Color>
    - updatePlayerLine() : void
    - updateGameStatus() : void

}
class Server{
    -lobbies : LinkedList<Lobby>
    -players : LinkedList<Player>
    -maxNumberOfPlayers : int
    -port : int
    -pool : FixedThreadPool
    -running : boolean
    +start() : void
}
enum Color{
    RED
    GREEN
    BLUE
    CYAN
    MAGENTA
    YELLOW
}
enum Seat{
    NORTH,
    SOUTH,
    NORTHEAST,
    NORTHWEST,
    SOUTHEAST,
    SOUTHWEST
}

enum Type

@enduml